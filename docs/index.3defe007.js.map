{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["function toRadians(degrees: number) {\r\n  return (degrees * Math.PI) / 180;\r\n}\r\n\r\ntype Entity = {\r\n  id: string;\r\n  stale: boolean;\r\n  render(ctx: CanvasRenderingContext2D): void;\r\n  update(isPressed: (key: Key) => boolean): void;\r\n};\r\n\r\ntype Collides = Physical & {\r\n  bbox: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  onCollisionWith(entity: Entity): void;\r\n};\r\n\r\nfunction collidesWith(rect1: Collides, rect2: Collides): boolean {\r\n  return (\r\n    rect1.x < rect2.x + rect2.bbox.width &&\r\n    rect1.x + rect1.bbox.width > rect2.x &&\r\n    rect1.y < rect2.y + rect2.bbox.height &&\r\n    rect1.bbox.height + rect1.y > rect2.y\r\n  );\r\n}\r\n\r\ntype Physical = {\r\n  x: number;\r\n  y: number;\r\n  vx: number;\r\n  vy: number;\r\n};\r\n\r\ntype Bounded = {\r\n  width: number;\r\n  height: number;\r\n};\r\n\r\nfunction physicalUpdate(physical: Physical) {\r\n  physical.x += physical.vx;\r\n  physical.y += physical.vy;\r\n}\r\n\r\ntype Asteroid = Physical & Bounded;\r\ntype Bullet = Physical;\r\n\r\nfunction asteroidEntity(\r\n  asteroid: Asteroid,\r\n  onSpawnAsteroid: (asteroid: Asteroid) => void\r\n): Entity & Asteroid & Collides {\r\n  return {\r\n    id: \"asteroid\",\r\n    stale: false,\r\n    bbox: {\r\n      width: asteroid.width,\r\n      height: asteroid.height,\r\n    },\r\n    ...asteroid,\r\n    render(ctx: CanvasRenderingContext2D) {\r\n      ctx.strokeStyle = \"white\";\r\n      ctx.strokeRect(this.x - this.width / 2, this.y - this.height / 2, this.width, this.height);\r\n    },\r\n    update(_isPressed) {\r\n      if (this.height * this.width < 200) {\r\n        this.stale = true;\r\n      }\r\n      physicalUpdate(this);\r\n    },\r\n    onCollisionWith(entity) {\r\n      if (entity.id === \"bullet\") {\r\n        const divergence = toRadians(Math.random() * 90);\r\n        const dx = this.vx;\r\n        const dy = this.vy;\r\n\r\n        const asteroidLeft: Asteroid = {\r\n          ...this,\r\n          width: this.width / Math.sqrt(2),\r\n          height: this.height / Math.sqrt(2),\r\n          vx: dx,\r\n          vy: -dy,\r\n        };\r\n        const asteroidRight: Asteroid = {\r\n          ...this,\r\n          width: this.width / Math.sqrt(2),\r\n          height: this.height / Math.sqrt(2),\r\n          vx: -dx,\r\n          vy: dy,\r\n        };\r\n        this.stale = true;\r\n        onSpawnAsteroid(asteroidLeft);\r\n        onSpawnAsteroid(asteroidRight);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nfunction bulletEntity(bullet: Bullet): Entity & Bullet & Collides {\r\n  const spawnTime = Date.now();\r\n  return {\r\n    id: \"bullet\",\r\n    stale: false,\r\n    ...bullet,\r\n    bbox: {\r\n      height: 3,\r\n      width: 3,\r\n    },\r\n    render(ctx: CanvasRenderingContext2D) {\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fillRect(this.x - 1, this.y - 1, 3, 3);\r\n    },\r\n    update(isPressed) {\r\n      physicalUpdate(this);\r\n      if (Date.now() - spawnTime > 1000) {\r\n        this.stale = true;\r\n      }\r\n    },\r\n    onCollisionWith(entity) {\r\n      if (entity.id === \"asteroid\") {\r\n        this.stale = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\ntype Ship = Physical & {\r\n  speed: number;\r\n  theta: number;\r\n  friction: number;\r\n};\r\n\r\nfunction shipEntity(ship: Ship, onCreateBullet: (bullet: Bullet) => void): Entity & Ship & Collides {\r\n  return {\r\n    id: \"ship\",\r\n    stale: false,\r\n    ...ship,\r\n    bbox: {\r\n      width: 30,\r\n      height: 35,\r\n    },\r\n    render(ctx) {\r\n      drawTriangle(ctx, \"white\", this.x, this.y, 30, 35, this.theta);\r\n    },\r\n    update(isPressed) {\r\n      const cosine = Math.cos(toRadians(this.theta - 90));\r\n      const sine = Math.sin(toRadians(this.theta - 90));\r\n      if (isPressed(Key.LEFT)) {\r\n        this.theta = (this.theta - 10) % 360;\r\n      }\r\n      if (isPressed(Key.RIGHT)) {\r\n        this.theta = (this.theta + 10) % 360;\r\n      }\r\n      if (isPressed(Key.UP)) {\r\n        this.vx += cosine * this.speed;\r\n        this.vy += sine * this.speed;\r\n      }\r\n      if (isPressed(Key.DOWN)) {\r\n        this.vx -= cosine * this.speed;\r\n        this.vy -= sine * this.speed;\r\n      }\r\n\r\n      this.vx *= 1 - this.friction;\r\n      this.vy *= 1 - this.friction;\r\n      if (isPressed(Key.SPACE)) {\r\n        onCreateBullet({\r\n          x: this.x + (cosine * 30) / 2,\r\n          y: this.y + (sine * 35) / 2,\r\n          vx: this.vx + cosine * 10,\r\n          vy: this.vy + sine * 10,\r\n        });\r\n      }\r\n\r\n      physicalUpdate(this);\r\n    },\r\n    onCollisionWith(other) {},\r\n  };\r\n}\r\n\r\nenum Key {\r\n  LEFT = 0,\r\n  RIGHT,\r\n  UP,\r\n  DOWN,\r\n  SPACE,\r\n}\r\n\r\ntype KeyStates = { [key: string]: boolean };\r\n\r\ntype ControlScheme = (keyStates: KeyStates, key: Key) => boolean;\r\n\r\nfunction isPressed(keyStates: KeyStates, key: string) {\r\n  return keyStates[key] ?? false;\r\n}\r\n\r\nconst basicControlScheme: ControlScheme = (keyStates, key) => {\r\n  if (key === Key.LEFT) {\r\n    return isPressed(keyStates, \"a\") || isPressed(keyStates, \"ArrowLeft\");\r\n  }\r\n  if (key === Key.RIGHT) {\r\n    return isPressed(keyStates, \"d\") || isPressed(keyStates, \"ArrowRight\");\r\n  }\r\n  if (key === Key.DOWN) {\r\n    return isPressed(keyStates, \"s\") || isPressed(keyStates, \"ArrowDown\");\r\n  }\r\n  if (key === Key.UP) {\r\n    return isPressed(keyStates, \"w\") || isPressed(keyStates, \"ArrowUp\");\r\n  }\r\n  if (key === Key.SPACE) {\r\n    return isPressed(keyStates, \"Spacebar\") || isPressed(keyStates, \" \");\r\n  }\r\n  return false;\r\n};\r\n\r\nfunction onKeyStateChange(keyStates: KeyStates, onEventValue: boolean) {\r\n  return (e: KeyboardEvent) => {\r\n    keyStates[e.key] = onEventValue;\r\n  };\r\n}\r\n\r\nfunction loop(timeStepMs: number, update: () => boolean) {\r\n  const i = setInterval(() => {\r\n    if (update()) {\r\n      clearInterval(i);\r\n    }\r\n  }, timeStepMs);\r\n\r\n  return i;\r\n}\r\n\r\nfunction withContext(context: CanvasRenderingContext2D, fn: (ctx: CanvasRenderingContext2D) => void) {\r\n  const oldStyle = context.fillStyle;\r\n  const oldStroke = context.strokeStyle;\r\n  fn(context);\r\n  context.fillStyle = oldStyle;\r\n  context.strokeStyle = oldStroke;\r\n}\r\n\r\nfunction drawTriangle(\r\n  context: CanvasRenderingContext2D,\r\n  style: string,\r\n  x: number,\r\n  y: number,\r\n  base: number,\r\n  height: number,\r\n  rotation: number\r\n) {\r\n  const angle = (rotation * Math.PI) / 180;\r\n  context.translate(x, y);\r\n  context.rotate(angle);\r\n\r\n  withContext(context, () => {\r\n    context.strokeStyle = style;\r\n    context.fillStyle = \"red\";\r\n    context.beginPath();\r\n    context.moveTo(-base / 2, height / 2);\r\n    context.lineTo(0, -height / 2);\r\n    context.lineTo(0 + base / 2 + 1, height / 2);\r\n    context.lineTo(-base / 2, height / 2);\r\n    context.stroke();\r\n  });\r\n\r\n  context.rotate(-angle);\r\n  context.translate(-x, -y);\r\n}\r\n\r\nfunction clear(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D) {\r\n  withContext(context, (context) => {\r\n    context.fillStyle = \"black\";\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n  });\r\n}\r\n\r\nfunction game(controlScheme: ControlScheme) {\r\n  const canvas = document.getElementById(\"asteroids-canvas\") as HTMLCanvasElement | null;\r\n  if (canvas === null) {\r\n    return;\r\n  }\r\n\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  if (ctx === null) {\r\n    return;\r\n  }\r\n\r\n  const keyStates: KeyStates = {};\r\n\r\n  document.onkeydown = onKeyStateChange(keyStates, true);\r\n  document.onkeyup = onKeyStateChange(keyStates, false);\r\n\r\n  const physicsManager = {\r\n    entities: [] as (Entity & Physical & Collides)[],\r\n    nextEntities: [] as (Entity & Physical & Collides)[],\r\n    add(entity: Entity & Physical & Collides) {\r\n      this.nextEntities.push(entity);\r\n    },\r\n    update() {\r\n      for (let entity = 0; entity < this.entities.length; ++entity) {\r\n        for (let otherEntity = 0; otherEntity < this.entities.length; ++otherEntity) {\r\n          if (otherEntity === entity) {\r\n            continue;\r\n          }\r\n          if (\r\n            !this.entities[entity].stale &&\r\n            !this.entities[otherEntity].stale &&\r\n            collidesWith(this.entities[entity], this.entities[otherEntity])\r\n          ) {\r\n            this.entities[entity].onCollisionWith(this.entities[otherEntity]);\r\n            this.entities[otherEntity].onCollisionWith(this.entities[entity]);\r\n          }\r\n        }\r\n        if (!this.entities[entity].stale) {\r\n          this.nextEntities.push(this.entities[entity]);\r\n        }\r\n      }\r\n      this.entities = this.nextEntities;\r\n      this.nextEntities = [];\r\n    },\r\n  };\r\n\r\n  const entityManager = {\r\n    entities: [] as (Entity & Physical)[],\r\n    nextEntities: [] as (Entity & Physical)[],\r\n    render(ctx: CanvasRenderingContext2D) {\r\n      for (const entity of this.entities) {\r\n        withContext(ctx, (ctx) => entity.render(ctx));\r\n      }\r\n    },\r\n    update(isPressed: (key: Key) => boolean) {\r\n      for (const entity of this.entities) {\r\n        entity.update(isPressed);\r\n        entity.x = (entity.x + 600) % 600;\r\n        entity.y = (entity.y + 600) % 600;\r\n        if (!entity.stale) {\r\n          this.nextEntities.push(entity);\r\n        }\r\n      }\r\n\r\n      this.entities = this.nextEntities;\r\n      this.nextEntities = [];\r\n    },\r\n    spawn(entity: Entity & Physical) {\r\n      this.nextEntities.push(entity);\r\n    },\r\n  };\r\n\r\n  const gun = {\r\n    lastTime: 0,\r\n    fire(bullet: Bullet) {\r\n      const currentTime = Date.now();\r\n      if (currentTime - this.lastTime > 500) {\r\n        createPhysical(bulletEntity(bullet));\r\n        this.lastTime = currentTime;\r\n      }\r\n    },\r\n  };\r\n\r\n  const createPhysical = (e: Entity & Physical & Collides) => {\r\n    entityManager.spawn(e);\r\n    physicsManager.add(e);\r\n  };\r\n\r\n  createPhysical(\r\n    shipEntity({ x: 300, y: 300, vx: 0, vy: 0, speed: 0.5, theta: 0, friction: 0.02 }, (bullet) => gun.fire(bullet))\r\n  );\r\n\r\n  const spawnAsteroid = (asteroid: Asteroid) => {\r\n    createPhysical(asteroidEntity(asteroid, spawnAsteroid));\r\n  };\r\n\r\n  for (let i = 0; i < 5; ++i) {\r\n    spawnAsteroid({\r\n      x: Math.random() * 600,\r\n      y: Math.random() * 600,\r\n      vx: Math.random() * 6 - 3,\r\n      vy: Math.random() * 6 - 3,\r\n      width: Math.random() * 30 + 25,\r\n      height: Math.random() * 30 + 25,\r\n    });\r\n  }\r\n\r\n  loop(20, () => {\r\n    clear(canvas, ctx);\r\n    entityManager.render(ctx);\r\n    physicsManager.update();\r\n    entityManager.update((key) => controlScheme(keyStates, key));\r\n    return false;\r\n  });\r\n}\r\n\r\ngame(basicControlScheme);\r\n"],"names":["toRadians","degrees","Math","PI","collidesWith","rect1","rect2","x","bbox","width","y","height","physicalUpdate","physical","vx","vy","asteroidEntity","asteroid","onSpawnAsteroid","id","stale","render","ctx","strokeStyle","strokeRect","this","update","_isPressed","onCollisionWith","entity","random","dx","dy","asteroidLeft","sqrt","asteroidRight","bulletEntity","bullet","spawnTime","Date","now","fillStyle","fillRect","isPressed","shipEntity","ship","onCreateBullet","drawTriangle","theta","cosine","cos","sine","sin","Key1","LEFT","RIGHT","UP","speed","DOWN","friction","SPACE","other","isPressed1","keyStates","key","Key","basicControlScheme","onKeyStateChange","onEventValue","e","loop","timeStepMs","i","setInterval","clearInterval","withContext","context","fn","oldStyle","oldStroke","style","base","rotation","angle","translate","rotate","beginPath","moveTo","lineTo","stroke","clear","canvas","context1","game","controlScheme","document","getElementById","ctx1","getContext","onkeydown","onkeyup","physicsManager","entities","nextEntities","add","push","length","otherEntity","entityManager","ctx2","spawn","gun","lastTime","fire","currentTime","createPhysical","spawnAsteroid"],"version":3,"file":"index.3defe007.js.map"}